openapi: 3.1.0
info:
  title: Synchronization API
  version: 1.0.0-beta.8
  summary: HsM Client Service API for business data synchronization
  description: |-
    ## General description

    This API is used to synchronize business data resources with external systems. It uses service authentication with tokens provided by AD. Once authenticated a process accessing this API is authorized to access any endpoint without restrictions.

    The Standard API is a client agnostic API to the HsM Client Service.

    ## Notes for developers

    ### i18N and Accept-Language header
    All operations will respect Accept-Language headers. If the operation has to handle localizable content it will do so respecting the Accept-Language header. This includes formatting of culture-specific data, sorting, language-specific content (phrases) etc.

    ### Responses
    This specification shows only the most relevant responses. Clients have to still handle all other possible HTTP Response codes.
  contact:
    name: Hagleitner Hygiene Internaltional GmbH
    url: 'http://www.hagleitner.com/'
    email: office@hagleitner.com
servers:
  - url: 'http://localhost:3000'
tags:
  - name: Branding
  - name: Customers
  - name: CustomerRelations
  - name: RoleAssignments
  - name: SelfRegistration
  - name: System
  - name: Users
  - name: CustomerFavorites
  - name: Locations
paths:
  /customers:
    parameters: []
    get:
      summary: /customers GET
      operationId: customers#get
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customer-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Gets customers with detail information useful for synchronization with external systems. The collection is ordered by name1.
      parameters:
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a customer with the given synchronization Id. Only a customer with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: latestUpdatedAfter
          description: Filters for customers  that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
            format: date-time
          in: query
          name: createdBefore
          description: 'Filters for customers  that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for customers based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
        - schema:
            type: string
          in: query
          name: customerNumber
          description: Filters for customers based on the customer number. Note that the customer Id is only unique within all customers of the same reseller.
        - schema:
            type: string
            pattern: '(\w+)(,\w+)*'
          in: query
          name: status
          description: Filters customers based on the customer status. Only customers in one of the status will be included in the result set.        -
        - schema:
            type: string
            format: uuid
          in: query
          name: resellerId
          description: Filters for sub customer of the given reseller.
        - schema:
            type: string
          in: query
          name: nameStartsWith
          description: Filters for customers whose name starts with the given string. String matching is done case insensitive..
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      tags:
        - Customers
    post:
      summary: /customers POST
      operationId: customer#post
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Creates a customer with detail information useful for synchronization with other systems.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
      tags:
        - Customers
  '/customers/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id} GET'
      operationId: customer#get
      tags:
        - Customers
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total count of resources in the collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets customer with detail information useful for synchronization with other systems.
      parameters: []
    put:
      summary: '/customers/{id} PUT'
      operationId: customer#put
      tags:
        - Customers
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer-synchronization'
  '/customers/{id}/condition-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/condition-relation GET'
      operationId: customer-condition-relation#get
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the condition relation of this customer (i.e. looking up the relation tree) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - CustomerRelations
    put:
      summary: '/customers/{id}/condition-relation PUT'
      operationId: customer-condition-relation#put
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's condition relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation-synchronization'
    delete:
      summary: '/customers/{id}/condition-relation DELETE'
      operationId: customer-condition-relation#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Deletes the customers condition relation.
      tags:
        - CustomerRelations
  '/customers/{id}/customer-condition-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/customer-condition-relations GET'
      operationId: customer-condition-relations#get
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRelation-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/customer-hierarchy-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/customer-hierarchy-relation GET'
      operationId: customer-customer-hierarchy-relation#get
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the customer-hierarchy relation of this customer (i.e. looking up the relation tree) with detail information useful for synchronization with other systems. '
      parameters: []
    put:
      summary: '/customers/{id}/customer-hierarchy-relation PUT'
      operationId: customer-customer-hierarchy-relation#put
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's customer-hierarchy relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation-synchronization'
    delete:
      summary: '/customers/{id}/customer-hierarchy-relation DELETE'
      operationId: customer-customer-hierarchy-relation#delete
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Deletes the relation relation.
      tags:
        - CustomerRelations
  '/customers/{id}/customer-hierarchy-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/customer-hierarchy-relations GET'
      tags:
        - CustomerRelations
      operationId: customer-customer-hierarchy-relations#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRelation-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/invoicing-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        description: ID of the customer
        required: true
    get:
      summary: '/customers/{id}/invoicing-relation GET'
      operationId: customer-invoicing-relation#get
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ''
        '500':
          description: Internal Server Error
      description: 'Gets the invoicing relation of this customer (i.e. looking up the reseller relation) with detail information useful for synchronization with other systems. '
      parameters: []
    put:
      summary: '/customers/{id}/invoicing-relation PUT'
      operationId: customer-invoicing-relation#put
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's invoicing relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
    delete:
      summary: '/customers/{id}/invoicing-relation DELETE'
      operationId: delete-customers-id-invoicing-relation
      responses:
        '200':
          description: OK
      description: Deletes the invoicing-relation of this customer.
      tags:
        - CustomerRelations
  '/customers/{id}/invoicing-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/invoicing-relations GET'
      operationId: customer-invoicing-relations#get
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRelation-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/reseller-relation':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/reseller-relation GET'
      operationId: customer-reseller-relation#get
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRelation-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Gets the reseller relation of this customer (i.e. looking up the reseller relation) with detail information useful for synchronization with other systems. '
      parameters: []
      tags:
        - CustomerRelations
    put:
      summary: '/customers/{id}/reseller-relation PUT'
      operationId: customer-reseller-relation#put
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a customer's reseller relation with detailled information for synchronization processes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRelation-synchronization'
      tags:
        - CustomerRelations
  '/customers/{id}/reseller-relations':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/reseller-relations GET'
      operationId: customer-reseller-relations#get
      tags:
        - CustomerRelations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRelation-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets all reseller relations of this customer i.e. all relations between customers where this customer is the reseller.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
  '/customers/{id}/role-assignments':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/role-assignments GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRoleAssignment-customer-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: customer-role-assignment#GET
      description: Gets roles-assignments of this customer together with synchronization data. Role-assignments are ordered by the assignment date ascending (oldest first).
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: If given filters the list for roles assigned to that specific user
      x-internal: false
      tags:
        - RoleAssignments
    post:
      summary: '/customers/{id}/role-assignments POST'
      operationId: customer-role-assignment#POST
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRoleAssignment-user'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new role-assignement for this customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRoleAssignment-customer'
      tags:
        - RoleAssignments
  '/customers/{id}/status':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/customers/{id}/status GET'
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - active
                  - inactive
                  - deleted
                example: inactive
      operationId: customer-status#get
      x-internal: false
      description: Gets all the customers on the condition path from the root to this customer as sorted list.
    put:
      summary: '/customers/{id}/status PUT'
      operationId: customer-status#put
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                required: true
                enum:
                  - active
                  - inactive
                  - deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      description: Modifies the status of a customer.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - active
                - inactive
                - deleted
      tags:
        - Customers
  /customer-relations:
    parameters: []
    get:
      summary: /customers-relations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/customerRelation-synchronization-list'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: customer-relationst#GET
      description: 'Gets a list of customer relations according to the query parameters. The '
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            enum:
              - customer-hierarchy
              - condition
              - reseller
              - invoicing
            example: invoicing
          in: query
          name: relationType
          description: Filters for relations of this specific type only.
          required: true
        - schema:
            type: string
          in: query
          name: childCustomerId
          description: Filters for relations where the child is the customer with the given ID.
        - schema:
            type: string
          in: query
          name: parentCustomerId
          description: Filters for relations where the parent is the customer with the given ID.
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for users based on the availability of a synchronizationId. If set to true only relations with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
      x-internal: false
      tags:
        - RoleAssignments
  '/role-assignments/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/role-assignments/{id}'
      tags:
        - RoleAssignments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerRoleAssignment-customer'
      operationId: role-assignments#get
      description: Gets a role-assignemnt
      parameters: []
      x-internal: true
  /system-role-assignments:
    parameters: []
    get:
      summary: /system-role-assignments GET
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/systemRoleAssignment-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: system-role-assignments#get
      description: Gets a role assignement between users and the system.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: userId
          description: Filters for system role assignments for a specific user.
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      x-internal: false
      tags:
        - RoleAssignments
    post:
      summary: /system-role-assignments POST
      operationId: post-synchronization-system-role-assignments
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-403-forbidden'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/systemRoleAssignment-synchronization'
      description: Creates a new system role assignment
      tags:
        - RoleAssignments
  '/system/role-assignments/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ID of the customer
    get:
      summary: '/system/role-assignments/{id} GET'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemRoleAssignment-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: system-role-assignment#get
      description: Gets a role assignement between users and the system.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment
      x-internal: false
      tags:
        - RoleAssignments
    delete:
      summary: '/system/role-assignments/{id} DELETE'
      operationId: system-role-assignment#delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Deletes a system role assignment.
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: Id
          description: ID of the role assignment.
      tags:
        - RoleAssignments
  /users:
    parameters: []
    get:
      summary: /users GET
      operationId: users#get
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user-synchronization'
                  totalPages:
                    $ref: '#/components/schemas/pagination-totalPages'
                  totalItems:
                    $ref: '#/components/schemas/pagination-totaItems'
                  pageSize:
                    $ref: '#/components/schemas/pagination-pageSize'
                  currentPage:
                    $ref: '#/components/schemas/pagination-currentPage'
                required:
                  - items
                  - totalPages
                  - totalItems
                  - pageSize
                  - currentPage
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '500':
          description: Internal Server Error
      description: Gets registered users with detail information useful for synchronization with other systems.
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
        - schema:
            type: string
            example: 'active,inactive'
          in: query
          name: status
          description: Filters users based on user status. If given only users one of the given status will pass the filter.
        - schema:
            type: string
            format: email
            example: jon@doe.com
          in: query
          name: emailAddress
          description: Filter for user with the given e-mail address. The match is case insensitive.
        - schema:
            type: string
            format: uuid
            example: 98aea202-354b-4912-81f7-364e609fe650
          in: query
          name: synchronizationId
          description: Filters for a user with the given synchronization Id. Only a user with an exact match will pass the filter.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: lastUpdatedAfter
          description: Filters for users that were last updated in the system after (>) the given date.
        - schema:
            type: string
            example: '2021-11-12T21:15:13.1234+01:00'
          in: query
          name: createdBefore
          description: 'Filters for users that were created in the system before (<) the given date. '
        - schema:
            type: boolean
          in: query
          name: synchronizationIdAvailable
          description: 'Filters for users based on the availability of a synchronizationId. If set to true only users with a non-empty synchronizationId will pass the filter, if set to false only users with an empty synchronizationId will pass the filter.  '
    post:
      summary: /users POST
      operationId: user#post
      tags:
        - Users
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Creates a new user together with synchronization data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
  '/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: UUID of the collection element
    get:
      summary: '/users/{id} GET'
      operationId: user#get
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-synchronization'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Gets a specific user with detail information useful for synchronization with other systems.
    put:
      summary: '/users/{id} PUT'
      operationId: user#put
      tags:
        - Users
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Updates a suer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
    patch:
      summary: '/users/{id} PATCH'
      operationId: user#patch
      tags:
        - Users
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-synchronization'
      description: Performs a partial update on a user-synchronization resource.
  '/users/{id}/status':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: '/users/{id}/status GET'
      operationId: user-status#get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                  - active
                  - inactive
                  - deleted
                  - masked
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: |-
        Gets a the status of a specific user.
        Active: The user can interact with the system.
        Inactive: The user can (temporarily) not interact with the system but can be reactivatd
        Deleted: The user was deleted and cannot be re-activated. The e-mail address of deleted users does not have to be unique within the system.
        Masked: The user was deleted and finally the data of the user was masked to support GPDR requirements. Masked users cannot be reactivated. All personal infomrmation is removed.
      tags:
        - Users
    put:
      summary: '/users/{id}/status PUT'
      operationId: user-status#put
      description: Updates a user's status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-400-badRequest'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - active
                - inactive
                - deleted
                - masked
components:
  schemas:
    customer-synchronization:
      type: object
      title: ''
      description: Describes a customer of the HsM system together with information relevant for synchronization with other business systems.
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system
          readOnly: true
        code:
          type: string
          example: HHAT
          description: A code that -if given - uniquely identifies the customer within the whole system.
        name1:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: The customer name
        name2:
          type: string
          example: A FacilityWiz subsidiary
          maxLength: 80
          description: Part of the customer name that is usually written on a second line in postal addresses.
        name3:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a third line in postal addresses.
        name4:
          type: string
          example: HGM Facility care & management Ltd.
          maxLength: 80
          description: Part of the customer name that is usually written on a forth line in postal addresses.
        address1:
          type: string
          example: Huey Avenue 33b
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        address2:
          type: string
          example: The Holo Building
          maxLength: 80
          description: 'Street name, number, apartment/room etc. of the customer. Describing the geographic locatio nof the customer. Usage depends on country and area.'
        city:
          type: string
          example: London
          maxLength: 80
          description: 'City, town village of the customer.'
        postalCode:
          type: string
          example: W3BX
          maxLength: 20
          description: 'Postal code of the city, town, village.'
          minLength: 2
        countryCode:
          type: string
          maxLength: 2
          example: GB
          description: ISO 3166-1 alpha-2 code
          minLength: 2
        customerNumber:
          type: string
          maxLength: 20
          example: 21-0789-B
          description: The customer number used by the reseller to uniquely identify this customer
        emailAddress:
          type: string
          description: The companies main e-mail address
          format: email
          example: office@hgmfacility.com
          maxLength: 256
        phoneNumber:
          type: string
          description: The companies main phone number
          example: +44 256 51512
          maxLength: 256
        vatIdentificationNumber:
          type: string
          description: The VAT identification number of the customer
          example: +44 256 51512
          maxLength: 256
        locale:
          type: string
          description: The locale the customer usually thinks in. Given as BCP 47/RFC 5646 language tag.
          example: en-GB
          maxLength: 35
        timeZone:
          type: string
          description: The time zone the customer usually thinks in. Given as IANA time zone name.
          example: Europe/Vienna
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
          description: The status of the user in terms of his possibilty to interact with the system
          default: active
          readOnly: true
        isReseller:
          type: boolean
          description: Defines if a customer is a reseller. Customers marked as resellers can use HsM's reseller features.
        lastUpdatedAt:
          type: string
          description: Describes when the user was last modified within HsM.
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        resellerId:
          type: string
          format: uuid
          description: Specifies the mandatory reseller for this customer
          writeOnly: true
        externallyManaged:
          type: boolean
          description: Defines if this is a externally managed customer. I.e. the customer details are managed by another system and synchronized to HsM and should therefore not be modified in HsM.
          readOnly: true
        AllowRoleInheritanceFromReseller:
          type: boolean
          description: Defines if roles applicable to the customer's reseller and marked for propagation down the reseller relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromParentCustomer:
          type: boolean
          description: Defines if roles applicable to the customer's parent customer and marked for propagation down the customer hierarchy relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromInvoiceRecipient:
          type: boolean
          description: Defines if roles applicable to the customer's invoice recipient and marked for propagation down the invoicing relation tree shall be actually inherited by this customer.
        AllowRoleInheritanceFromConditionOwneron:
          type: boolean
          description: Defines if roles applicable to the customer's condition owner and marked for propagation down the condition relation tree shall be actually inherited by this customer.
        createdAt:
          type: string
          format: date-time
          description: Date time offset when this customer record was created
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
          description: ID of the customer in an external system it is synchronized with.
        synchronizationInformation:
          type: string
          description: A JSON document that stores additional information for a synchronization process.
      required:
        - id
        - name1
        - countryCode
        - emailAddress
        - resellerId
        - externallyManaged
    customerRelation-synchronization:
      type: object
      title: ''
      description: 'Represents a customer relation between two customers in HsM, including synchronization data.'
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
        lastUpdatedAt:
          type: string
          format: date-time
          readOnly: true
        externallyManaged:
          type: boolean
          default: false
          description: 'If true this resource is exernally managed, the possibilities to modify the resource in HsM is then limited.'
        synchronizationId:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - customerId
        - externallyManaged
    customerRelation-synchronization-list:
      type: object
      title: ''
      description: 'Represents a customer relation between two customers in HsM, including synchronization data.'
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        parentId:
          type: string
          format: uuid
        childId:
          type: string
          format: uuid
        lastUpdatedAt:
          type: string
          format: date-time
          readOnly: true
        externallyManaged:
          type: boolean
          default: false
          description: 'If true this resource is exernally managed, the possibilities to modify the resource in HsM is then limited.'
        synchronizationId:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - parentId
        - childId
        - externallyManaged
    user-synchronization:
      type: object
      title: ''
      description: 'Represents a user of the HsM system including synchronization data. '
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user within the HsM system.
          readOnly: true
        givenName:
          type: string
          example: John
          maxLength: 50
          description: Given name of the user
        familyName:
          type: string
          example: Doe
          maxLength: 50
          description: 'Surname(s) or last name(s) of the user. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.'
        emailAddress:
          type: string
          description: The users e-mail address. This address must be unique within all non deleted users in the HsM system.
          format: email
          example: john@doe.com
          maxLength: 256
        status:
          type: string
          enum:
            - active
            - inactive
            - deleted
            - masked
          readOnly: true
        locale:
          type: string
          description: The locale the user wants to use in interaction with the system. Defined as BCP 47/RFC 5646 language tag.
          example: de-AT
          maxLength: 35
        timeZone:
          type: string
          description: |-
            The time zone the user wants to use in interaction with the system. String from zoneinfo time zone database.

            This time zone is a default for this user, client systems might however choose to use another time zones for interaction with the HsM system.
          example: Europe/Vienna
        createdAt:
          type: string
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        latestUpdatedAt:
          type: string
          description: 'Describes when the user was last modified within HsM. '
          format: date-time
          example: '2021-08-23T16:15:18.123+01:00'
          readOnly: true
        synchronizationId:
          type: string
          format: uuid
          description: ID of the user in an external system.
        synchronizationInformation:
          type: string
          description: A JSON document that can be used by synchronization processes to store synchronization information with this user. The schema of the JSON document is defined by the external synchronization process.
        externallyManaged:
          type: boolean
          default: false
          description: 'If true this resource is exernally managed, the possibilities to modify the resource in HsM is then limited.'
      required:
        - id
        - givenName
        - emailAddress
        - createdAt
        - latestUpdatedAt
        - externallyManaged
    response-400-badRequest:
      description: ''
      type: object
      x-examples:
        example-1:
          error:
            code: InvalidEmail
            message: The provided e-mail address is syntactically not valid.
            displayMessage: Die angegebene E-Mail Addresse ist ungültig
            target: EMail
            innerError:
              code: EmailTestFailed
              innerError:
                code: NoSuchAccount
            details:
              - code: NoAtSign
                message: There is no @ sign in the email
              - code: EmailAddressContainsInvalidCharacters
                message: 'Email addresses can only contain [a-zA-Z]'
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              minLength: 1
            message:
              type: string
              minLength: 1
            displayMessage:
              type: string
              minLength: 1
            target:
              type: string
              minLength: 1
            innerError:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  minLength: 1
                innerError:
                  type: object
                  required:
                    - code
                  properties:
                    code:
                      type: string
                      minLength: 1
            details:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  code:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - code
                  - message
      required:
        - error
    response-401-unauthorized:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            correlationId:
              type: string
            missingPermissions:
              type: array
              items:
                type: string
            details:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                required:
                  - code
                  - message
          required:
            - code
            - message
    response-403-forbidden:
      type: object
      title: ''
    customerRoleAssignment-customer:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a customers perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: ID of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        userDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
        applicableToRelatedCustomersOnly:
          type: boolean
        externallyManaged:
          type: boolean
      required:
        - id
        - userId
        - assignedAt
        - roleId
        - userDisplayName
        - roleName
        - externallyManaged
    customerRoleAssignment-customer-synchronization:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a customers perspective. Includes additional data for synchronization.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: ID of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        userDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
        synchronizationid:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
        externallyManaged:
          type: boolean
          default: false
        applicableToRelatedCustomersOnly:
          type: boolean
      required:
        - id
        - userId
        - assignedAt
        - roleId
        - userDisplayName
        - roleName
        - externallyManaged
    customerRoleAssignment-user:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a customer role assignment from a users perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        customerId:
          type: string
          format: uuid
          description: ID of user who is assigned a role
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        customerDisplayName:
          type: string
          description: Display name of the user.
          readOnly: true
        roleName:
          type: string
          description: Name of the assigned role
          readOnly: true
        applicableToRelatedCustomersOnly:
          type: boolean
        externallyManaged:
          type: boolean
      required:
        - id
        - customerId
        - assignedAt
        - roleId
        - customerDisplayName
        - roleName
    systemRoleAssignment-synchronization:
      title: ''
      type: object
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          assignedAt: '2019-08-24T14:15:22Z'
          roleId: 7382d58e-652a-4905-b7c9-bcca1e0e5391
          userDisplayName: 'Doe, John'
          roleName: Customer Administrator
      description: Represents a role assignment from a users perspective.
      properties:
        id:
          type: string
          description: ID of the role assignment
          format: uuid
          readOnly: true
        assignedAt:
          type: string
          description: Date when the role was assigned
          format: date-time
          readOnly: true
        roleId:
          type: string
          description: ID of the assigned role.
          format: uuid
        userId:
          type: string
          format: uuid
        externallyManaged:
          type: boolean
          default: false
        synchronizationId:
          type: string
          format: uuid
        synchronizationInformation:
          type: string
      required:
        - id
        - assignedAt
        - roleId
        - userId
        - externallyManaged
    userStatus:
      type: string
      title: ''
      enum:
        - active
        - inactive
        - deleted
        - masked
      description: The status of a user within HsM.
      default: active
    pagination-totalPages:
      type: integer
      title: pagination-totalPages
      description: Total number of pages available.
      minimum: 0
    pagination-totaItems:
      type: integer
      title: pagination-totalItems
      description: Total number of items available.
      minimum: 0
    pagination-currentPage:
      type: integer
      title: pagination-totalPages
      description: Current page included in this result.
      minimum: 0
    pagination-pageSize:
      type: integer
      title: pagination-totalPages
      description: Page size that was used to generate the result set.
      minimum: 0
  parameters:
    pageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        format: int32
        example: 100
        default: 100
        minimum: 1
      description: 'Pagination, maximum number of elements in a page.'
    pageNumber:
      name: pageNumber
      in: query
      schema:
        type: integer
        format: int32
        minimum: 1
        example: 200
      description: 'Pagination, 1-based number of the page to return.'
